-- Create the 'restaurant' database
CREATE DATABASE IF NOT EXISTS restaurant;
USE restaurant;

-- Table: users
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: tables (for table layout in the restaurant)
CREATE TABLE IF NOT EXISTS tables (
    id INT AUTO_INCREMENT PRIMARY KEY,
    x INT NOT NULL,  -- X-coordinate position of the table
    y INT NOT NULL,  -- Y-coordinate position of the table
    size INT NOT NULL,  -- Size of the table (e.g., number of seats)
    inside BOOLEAN NOT NULL DEFAULT TRUE,  -- Indicates if the table is inside or outside
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: reservations (for tracking reservations in the restaurant)
CREATE TABLE IF NOT EXISTS reservations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    table_id INT NOT NULL,
    user_id INT NOT NULL,
    how_many INT NOT NULL,  -- Number of people for the reservation
    date DATETIME NOT NULL,  -- Reservation date and time
    location VARCHAR(50) NOT NULL,  -- Location preference (e.g., 'inside' or 'outside')
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (table_id) REFERENCES tables(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Optional Table: orders (if you want to track orders made in the restaurant)
CREATE TABLE IF NOT EXISTS orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    reservation_id INT NULL,  -- Nullable in case orders are made without reservations
    order_details TEXT NOT NULL,  -- Details of the order
    total_amount DECIMAL(10, 2) NOT NULL,  -- Total amount for the order
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (reservation_id) REFERENCES reservations(id) ON DELETE SET NULL
);

-- Indexes to improve query performance
CREATE INDEX idx_tables_inside ON tables (inside);
CREATE INDEX idx_reservations_date ON reservations (date);
CREATE INDEX idx_orders_order_date ON orders (order_date);

-- Test Data (optional) for users and tables
INSERT INTO users (email, password) VALUES 
('user1@example.com', 'password1'),
('user2@example.com', 'password2');

INSERT INTO tables (x, y, size, inside) VALUES
(100, 150, 4, TRUE),
(200, 300, 6, TRUE),
(50, 80, 2, FALSE);
